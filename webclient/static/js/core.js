// Generated by CoffeeScript 1.3.3
(function() {
  var AJAX_KEYPRESS_DELAY, API, AUCTIONS_LIST_ACTIVE, AUCTIONS_STATUS_BY_ID, BID, CANCEL_AUTO_BIDDER, CREATE_AUTO_BIDDER, GET_AUTO_BIDDER_STATUS, LIST_AUTO_BIDDERS_FOR_AUCTION, LIST_AUTO_BIDDERS_FOR_USER, USER_AUTHENTICATE, USER_EMAIL_EXISTS, USER_REGISTER, USER_USERNAME_EXISTS, VALIDATE_EMAIL, auction_ids, auctions, callApi, getCookie, getParameterByName, login, padzero, registration, secondsToHms, showDialog, typewatch, updateAuctions, validate_email;

  API = "http://pisoapi.appspot.com";

  CREATE_AUTO_BIDDER = "/create_auto_bidder";

  GET_AUTO_BIDDER_STATUS = "/get_auto_bidder_status";

  CANCEL_AUTO_BIDDER = "/cancel_auto_bidder";

  LIST_AUTO_BIDDERS_FOR_USER = "/list_auto_bidders_for_user";

  LIST_AUTO_BIDDERS_FOR_AUCTION = "/list_auto_bidders_for_auction";

  AUCTIONS_LIST_ACTIVE = "/auctions_list_active";

  AUCTIONS_STATUS_BY_ID = "/auctions_status_by_id";

  USER_REGISTER = "/user_register";

  USER_AUTHENTICATE = "/user_authenticate";

  VALIDATE_EMAIL = "/user_validate_email";

  USER_USERNAME_EXISTS = "/user_username_exists";

  USER_EMAIL_EXISTS = "/user_email_exists";

  BID = "/bid";

  AJAX_KEYPRESS_DELAY = 500;

  $(document).ready(function() {
    $.ajaxSetup({
      async: true,
      dataType: "jsonp",
      jsonp: false,
      cache: false,
      type: "GET",
      beforeSend: function(xhr, settings) {},
      complete: function(xhr, status) {},
      error: function(xhr, status, error) {
        if (result.statusText !== "abort") {
          return showDialog("error", "Unexpected Error", error);
        }
      }
    });
    $("#messageDialog").dialog({
      autoOpen: false,
      modal: true,
      width: 300,
      height: 200,
      buttons: {
        Ok: function() {
          return $(this).dialog("close");
        }
      }
    });
    auctions.init();
    login.init();
    registration.init();
    validate_email.init();
    return window.setInterval(updateAuctions, 1000);
  });

  auction_ids = [];

  auctions = {
    init: function() {
      var buildAuction;
      callApi(AUCTIONS_LIST_ACTIVE, {
        count: 30
      }, function(data) {
        var b, i, ix, m, n, p, t, u, w, _results;
        $("#auctions").html("");
        auctions = data.result;
        _results = [];
        for (ix in auctions) {
          i = auctions[ix].i;
          n = auctions[ix].n;
          b = auctions[ix].b;
          u = auctions[ix].u;
          m = auctions[ix].m;
          p = auctions[ix].p;
          w = auctions[ix].w;
          t = secondsToHms(auctions[ix].t);
          auction_ids.push(i);
          _results.push($("#auctions").append(buildAuction(i, n, b, u, m, p, w, t)));
        }
        return _results;
      });
      return buildAuction = function(id, productName, basePrice, productUrl, imageUrl, currentPrice, currentWinner, timeTilEnd) {
        var tmplAuction;
        tmplAuction = void 0;
        tmplAuction = '';
        tmplAuction += ' <li id="{auction-id}">\n';
        tmplAuction += '\t\t<!-- top block -->\n';
        tmplAuction += '\t\t<div class="top-block">\n';
        tmplAuction += '\t\t\t<h3 class="nocufon"><a href="{url}" title="{item-name}">{item-name}</a></h3>\n';
        tmplAuction += '\t\t\t\t<div class="imgb thumbnail-zoom">\n';
        tmplAuction += '\t\t\t\t\t<a href="{url}" class="fadeable">\n';
        tmplAuction += '\t\t\t\t\t\t<span class="light-background">\n';
        tmplAuction += '\t\t\t\t\t\t<span class="thumb-arrow">&#8594;</span>\n';
        tmplAuction += '\t\t\t\t\t\t</span>\n';
        tmplAuction += '\t\t\t\t\t\t<span>\n';
        tmplAuction += '\t\t\t\t\t\t\t<img src="{image-url}" width="194" height="144" alt="{item-name}" />\n';
        tmplAuction += '\t\t\t\t\t\t\t<!--<span class="sale-img">NEW<span>ITEM</span></span>-->\n';
        tmplAuction += '\t\t\t\t\t\t</span>\n';
        tmplAuction += '\t\t\t\t\t</a>\n';
        tmplAuction += '\t\t\t\t</div>\n';
        tmplAuction += '\t\t\t\t<span class="winner"><a href="#">{winner}</a></span>\n';
        tmplAuction += '\t\t\t\t<span class="price">P {current-price}</span>\n';
        tmplAuction += '\t\t\t\t<span class="timeleft">{time-remaining}</span>\n';
        tmplAuction += '\t\t\t</div>\n';
        tmplAuction += '\t\t<!-- top block -->\n';
        tmplAuction += '\t\t<div class="cart-button js-button"><a class="hov" href="javascript:void(0);"><span>BID NOW</span></a><a href="cart-page.html"><span>BID NOW</span></a></div>\n';
        tmplAuction += '\t</li>\n';
        tmplAuction = tmplAuction.replaceAll("{auction-id}", id);
        tmplAuction = tmplAuction.replaceAll("{url}", productUrl);
        tmplAuction = tmplAuction.replaceAll("{item-name}", productName);
        tmplAuction = tmplAuction.replaceAll("{image-url}", imageUrl);
        tmplAuction = tmplAuction.replaceAll("{current-price}", currentPrice);
        tmplAuction = tmplAuction.replaceAll("{winner}", currentWinner);
        tmplAuction = tmplAuction.replaceAll("{time-remaining}", timeTilEnd);
        return tmplAuction;
      };
    }
  };

  updateAuctions = function() {
    return jQuery.ajax({
      url: API + AUCTIONS_STATUS_BY_ID,
      data: {
        ids: auction_ids.join()
      },
      jsonp: "callback",
      success: function(data) {
        return $.map(data, function(auction) {
          var i, ix, p, t, w, _results;
          auctions = data.result;
          _results = [];
          for (ix in auctions) {
            i = auctions[ix].i;
            p = auctions[ix].p;
            w = auctions[ix].w;
            t = secondsToHms(auctions[ix].t);
            $("#" + i + " span.winner").html("<a href=\"#\">" + w + "</a>");
            $("#" + i + " span.price").text(p);
            _results.push($("#" + i + " span.timeleft").html(t));
          }
          return _results;
        });
      }
    });
  };

  login = {
    init: function() {
      $("#top-account-info").hide();
      $("#login-username").val("username");
      $("#login-password").val("password");
      $("#login-form").submit(function(e) {
        var password, username;
        username = $("#login-username").val();
        password = $("#login-password").val();
        callApi(USER_AUTHENTICATE, {
          username: username,
          password: password
        }, function(data) {
          if (data.result != null) {
            $('div#login-wrapper').animate({
              marginRight: -400
            }, 1000);
            $('#top-account-info').fadeIn(1000);
          }
          if (data.exception) {
            return showDialog("error", "Login Error", data.exception);
          }
        });
        return false;
      });
      $("#login-form").delegate("#login-username, #login-password", "focus", function() {
        if ($(this).val() === "username" || $(this).val() === "password") {
          $(this).val("");
          return $(this).addClass("login-focus");
        }
      });
      return $("#login-form").delegate("#login-username, #login-password", "blur", function() {
        if ($(this).val() === "") {
          $(this).val($(this).attr("id").split("-")[1]);
          return $(this).removeClass("login-focus");
        }
      });
    }
  };

  registration = {
    init: function() {
      $("div#registration-complete").hide();
      return $("#registration-form").submit(function(e) {
        var email, error, first_name, last_name, password, termsaccepted, username;
        error = "<ul style='clear: both'>";
        first_name = $("#FirstName").val();
        last_name = $("#LastName").val();
        username = $("#Username").val();
        email = $("#Email").val();
        password = $("#Password").val();
        termsaccepted = $("#termsandconditions:checked").val();
        if (first_name.length === 0) {
          error += "<li>A First Name is required.<li/>";
        }
        if (last_name.length === 0) {
          error += "<li>A Last Name is required.<li/>";
        }
        if (username.length === 0) {
          error += "<li>A username is required.<li/>";
        }
        if (email.length === 0) {
          error += "<li>An email address is required.<li/>";
        }
        if (password.length === 0) {
          error += "<li>A password is required.<li/>";
        }
        if (!termsaccepted) {
          error += "<li>You must accept our terms and conditions to register an account.<li/>";
        }
        error += "</ul>";
        if (error !== "<ul style='clear: both'></ul>") {
          showDialog("error", "Registration Error", error);
          return false;
        }
        callApi(USER_REGISTER, {
          first_name: first_name,
          last_name: last_name,
          username: username,
          email: email,
          password: password
        }, function(data) {
          if (data.exception) {
            showDialog("error", "Registration Error", data.exception);
            return;
          }
          if (data.result) {
            $("div#registration-form").slideUp('slow', function() {
              $("div#registration-complete strong").text(email);
              return $("div#registration-complete").fadeIn(1000);
            });
          }
        });
        return false;
      });
    }
  };

  validate_email = {
    init: function() {
      var code;
      $("#validation-error").hide();
      $("#validation-success").hide();
      if ($("div#validate-email") != null) {
        code = getParameterByName('code');
        return callApi(VALIDATE_EMAIL, {
          code: code
        }, function(data) {
          $("div#validate-email div#please-wait").hide();
          if (data.exception) {
            $("#validation-error h2").text(data.exception);
            $("#validation-error").fadeIn(1000);
            return;
          }
          if (data.result) {
            $("#validation-success").fadeIn(1000);
          }
        });
      }
    }
    /*
    # Bid Button Clicked 
    $(".auction-bid-button").click ->
    	auction_id = $(@).parent().attr("id")
    	$.ajax
    		url: API + BID
    		data:
    			id: auction_id
    		success: (data) ->
    			alert data
    
    # validate cookie 
    cookie = getCookie("pisoauction")
    if cookie? and cookie isnt ""
    	return
    
    
    
    
    
    # Count auctions down 
    $(".auction-time-remaining").each (i) ->
    	parts = @innerHTML.split(":")
    	d = new Date()
    	d.setHours parts[0]
    	d.setMinutes parts[1]
    	d.setSeconds parts[2]
    	oldHours = d.getHours()
    	@innerHTML = padzero(d.getHours(), 2) + ":" + padzero(d.getMinutes(), 2) + ":" + padzero(d.getSeconds(), 2)	if oldHours >= d.getHours()
    */

  };

  typewatch = (function() {
    var timer;
    timer = 0;
    return function(callback, ms) {
      clearTimeout(timer);
      return timer = setTimeout(callback, ms);
    };
  })();

  showDialog = function(dialogType, title, message) {
    var icon;
    icon = "info";
    switch (dialogType) {
      case "info":
        icon = "info";
        break;
      case "error":
        icon = "alert";
        break;
      default:
        icon = "info";
    }
    $("#messageDialog p").html("<span class='ui-icon ui-icon-" + icon + "' style='float:left; margin:0 7px 20px 0;'></span>" + message);
    $("#messageDialog").dialog({
      title: title
    });
    return $("#messageDialog").dialog("open");
  };

  padzero = function(number, length) {
    var str;
    str = "" + number;
    while (str.length < length) {
      str = "0" + str;
    }
    return str;
  };

  getCookie = function(c_name) {
    var ARRcookies, i, x, y;
    i = void 0;
    x = void 0;
    y = void 0;
    ARRcookies = document.cookie.split(";");
    i = 0;
    while (i < ARRcookies.length) {
      x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
      y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
      x = x.replace(/^\s+|\s+$/g, "");
      if (x === c_name) {
        return unescape(y);
      }
      i++;
    }
  };

  callApi = function(method, data, callback) {
    return jQuery.ajax({
      url: API + method,
      data: data,
      jsonp: "callback",
      success: callback
    });
  };

  getParameterByName = function(name) {
    var regex, regexS, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.search);
    if (results == null) {
      return "";
    } else {
      return decodeURIComponent(results[1].replace(/\+/g, " "));
    }
  };

  secondsToHms = function(d) {
    var h, m, s;
    d = Number(d);
    h = Math.floor(d / 3600);
    m = Math.floor(d % 3600 / 60);
    s = Math.floor(d % 3600 % 60);
    return padzero(h, 2) + ":" + padzero(m, 2) + ":" + padzero(s, 2);
  };

  String.prototype.replaceAll = function(str1, str2, ignore) {
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), (ignore ? "gi" : "g")), (typeof str2 === "string" ? str2.replace(/\$/g, "$$$$") : str2));
  };

}).call(this);
